function addChip(e){if(game.playing&&!game.duringMove){const a=getFirstEmptyRow(e);if(-1!=a){game.array[a][e]=game.currentPlayer,game.duringMove=!0,$("#game").addClass("duringMove");const r=$("<div></div>").attr("id",`chip${a}_`+e).addClass("chip fall").css("--col",e).css("--row",-2).addClass(0==game.currentPlayer?"red":"yellow").appendTo("#inner");setTimeout(()=>{r.css("--row",a)},0),setTimeout(()=>{checkEnding()},600)}}}function getFirstEmptyRow(e){let a=game.rows[game.rows.length-1];for(;0<=a&&null!=game.array[a][e];)a--;return a}function highlightChips(e){for(const i of e){var[a,r]=i;$(`#chip${a}_`+r).addClass("highlight")}$("#scene").addClass("grow")}
function enableControls(){$("#playerForm").on("submit",createPlayers),$("#restartBtn").on("click",resetGame),$("#rotateLeftBtn").on("click",()=>rotateGame(1)),$("#rotateRightBtn").on("click",()=>rotateGame(-1))}
const game={winParam:4,array:[],currentPlayer:0,playing:!1,duringMove:!1,rows:[0,1,2,3,4,5],cols:[0,1,2,3,4,5,6],playerNames:["",""],directions:[[0,1],[1,0],[1,1],[0,-1],[-1,0],[-1,-1],[1,-1],[-1,1]],rotation:0};
$(()=>{$("#game").addClass("start").css("--rows",game.rows.length).css("--cols",game.cols.length),$("#modalContent").fadeIn("slow"),generateSlots(),resetArray(),enableControls()});
function createPlayers(e){e.preventDefault();var a=$("#playerName1").val(),e=$("#playerName2").val();0==a.length||0==e.length?$(".error").text("Please input a name for each player"):a==e?$(".error").text("Please input different names"):(game.playerNames=[a,e],startGame())}function setPlayer(e){$("body").removeClass("player"+game.currentPlayer).addClass("player"+e),$("#message").text(game.playerNames[e]+"'s turn"),game.currentPlayer=e}function switchPlayer(){setPlayer(1-game.currentPlayer)}
function resetArray(){game.array=new Array(game.rows.length).fill(null).map(()=>new Array(game.cols.length).fill(null))}function startGame(){game.playing=!0,setPlayer(randInt(0,2)),$("#modal").remove(),$("#status, menu").fadeIn("slow")}function resetGame(){removeChips(),resetArray(),$("#game").addClass("restart"),setTimeout(()=>{$("#game").removeClass("restart")},1e3),$("#scene").removeClass("grow"),$("#game").removeClass("duringMove"),$(".playerIcon").show(),setTimeout(()=>{setPlayer(randInt(0,2)),game.playing=!0},2e3)}function removeChips(){var e=getFirstNonEmptyRow();for(let t=e;t<game.rows.length;t++)setTimeout(()=>{for(const e of game.cols){const r=$(`#chip${t}_`+e).css("--row",-3);setTimeout(()=>r.remove(),600)}},200*(t-e))}function getFirstNonEmptyRow(){let e=0;for(;e<game.rows.length&&game.array[e].every(e=>null==e);)e++;return e}
function rotateGame(t){game.rotation+=22.5*t,(game.rotation-90)%180==0&&(game.rotation+=22.5*t),$("#game").css("--rotation-y",game.rotation+"deg")}
function generateSlots(){for(const o of game.rows)for(const a of game.cols)$("<div></div>").attr("id",`slot${o}_`+a).addClass("slot").appendTo(".frame").on("click",()=>addChip(a))}
function randInt(n,r){return n+Math.floor((r-n)*Math.random())}
function checkEnding(){game.duringMove=!1,game.playing=!1,isWon()?$("#message").text(game.playerNames[game.currentPlayer]+" has won! ðŸŽ‰"):hasOpenSlots()?($("#game").removeClass("duringMove"),game.playing=!0,switchPlayer()):($(".playerIcon").hide(),$("#message").text("The game has ended in a draw."))}function hasOpenSlots(){return game.array.some(e=>e.some(e=>null==e))}function isWonAt(a,n,e){var[s,r]=e;const g=[],o=[];for(let e=0;e<game.winParam;e++){if(!(0<=a+e*r&&a+e*r<game.rows.length&&0<=n+e*s&&n+e*s<game.cols.length))return!1;o.push([a+r*e,n+s*e]),g.push(game.array[a+r*e][n+s*e])}return 1==new Set(g).size&&(highlightChips(o),!0)}function isWon(){return game.rows.some(n=>game.cols.some(a=>null!=game.array[n][a]&&game.directions.some(e=>isWonAt(n,a,e))))}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
